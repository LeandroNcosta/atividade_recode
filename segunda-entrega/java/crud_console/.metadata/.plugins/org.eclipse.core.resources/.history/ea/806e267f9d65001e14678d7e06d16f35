package com.agencia.dao;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

import com.agencia.model.Cliente;
import com.agencia.model.Pacote;
import com.agencia.utils.Colors;

public class PacoteDAO implements CRUD {
	private static Connection conn;
	// private static Connection conn = Database.createConnection();
	private static String sql;
	private static ResultSet rset = null;

	public PacoteDAO(Connection conn) {
		this.conn = conn;
	}

	public static void create(Pacote pacote) {
		sql = "INSERT INTO pacote(id, promocao, valorTotal, idHospedagem, idPassagem) VALUES(null, ?, ?, ?, ?);";

		try (PreparedStatement stmt = conn.prepareStatement(sql)) {
			stmt.setBoolean(1, pacote.getPromocao());
			stmt.setBigDecimal(2, pacote.getValorTotal());
			stmt.setInt(3, pacote.getHospedagem().getId() );
			stmt.setInt(4, pacote.getPassagem().getId());

			stmt.executeUpdate();

			System.out.println(Colors.GREEN + "--Pacote criado com sucesso" + Colors.RESET);
		} catch (SQLException e) {
			System.out.println("--Erro ao criar pacote, Mensagem: " + e.getMessage());
		} finally {

		}
	}

	public static List<Pacote> read(String pesquisa) {
		sql = String.format("SELECT * FROM pacote WHERE nome LIKE '%s%%' OR cpf LIKE '%s%%'", pesquisa, pesquisa);
		List<Pacote> pacotes = new ArrayList<Pacote>();

		try (Statement statement = conn.createStatement()) {
			ResultSet resultSet = statement.executeQuery(sql);

			while (resultSet.next()) {
				Pacote pacote = new Pacote();
				
				pacote.setId(resultSet.getInt("id"));
				pacote.setPromocao(resultSet.getBoolean("promocao"));
				pacote.setValorTotal(resultSet.getBigDecimal("valorTotal"));
				pacote.setHospedagem(HospedagemDAO.findBy(resultSet.getInt("idHospedagem")));
				pacote.setPassagem(PassagemDAO.findBy(resultSet.getInt("idPassagem")));
				
				pacotes.add(pacote);
			}

			System.out.println(Colors.GREEN + "--Resultado retornado com sucesso" + Colors.RESET);
			System.out.println("");
			return pacotes;
		} catch (SQLException e) {
			System.out.println("--Não foi possíevl ler os dados da tabela pacote. Message: " + e.getMessage());
			return null;
		}
	}

	public static void update(Cliente cliente) {
		sql = "UPDATE cliente SET nome = ?, email = ?, telefone = ?, passaporte = ?, cpf = ? WHERE id = ? LIMIT 1";

		try (PreparedStatement stmt = conn.prepareStatement(sql)) {
			stmt.setString(1, cliente.getNome());
			stmt.setString(2, cliente.getEmail());
			stmt.setString(3, cliente.getTelefone());
			stmt.setString(4, cliente.getTelefone());
			stmt.setString(5, cliente.getCpf());
			stmt.setInt(6, cliente.getId());

			stmt.executeUpdate();

			System.out.printf(Colors.GREEN + "--Cliente atualizado" + Colors.RESET);

		} catch (SQLException e) {
			System.out.printf("--Erro ao atualizar cliente com o id : %d, Mensagem: %n", cliente.getId(),
					e.getMessage());

		} finally {

		}
	}

	public static void delete(int id) {
		sql = "DELETE FROM cliente WHERE id = ? LIMIT 1";

		try (PreparedStatement stmt = conn.prepareStatement(sql)) {
			stmt.setInt(1, id);
			stmt.executeUpdate();

			System.out.println(Colors.GREEN + "--Cliente foi deletado com sucesso." + Colors.RESET);

		} catch (SQLException e) {
			System.out.printf(Colors.RED + "--Erro ao deletar cliente com o id : %d, Mensagem: %n", id,
					e.getMessage() + Colors.RED);

		} finally {

		}
	}

	public static Cliente findBy(int clienteId) {
		sql = String.format("SELECT * FROM cliente WHERE id = %d or cpf = %s", clienteId, clienteId);
		Cliente cliente = new Cliente();

		try (Statement statement = conn.createStatement()) {
			ResultSet resultSet = statement.executeQuery(sql);

			while (resultSet.next()) {
				cliente.setId(resultSet.getInt("id"));
				cliente.setNome(resultSet.getString("nome"));
				cliente.setEmail(resultSet.getString("email"));
				cliente.setTelefone(resultSet.getString("telefone"));
				cliente.setPassaporte(resultSet.getString("passaporte"));
				cliente.setCpf(resultSet.getString("cpf"));
			}

			System.out.println(Colors.GREEN + "--Encontrado cliente com sucesso" + Colors.RESET);

			return cliente;
		} catch (SQLException e) {
			System.out.println("--Não foi possível encontrar o cliente informado. Message: " + e.getMessage());
			return null;
		}

	}

}
