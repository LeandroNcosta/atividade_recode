package com.agencia.dao;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

import com.agencia.model.ClientePacote;
import com.agencia.utils.Colors;

public class ClientePacoteDAO {
	private static Connection conn;
	// private static Connection conn = Database.createConnection();
	private static String sql;
	private static ResultSet rset = null;

	public ClientePacoteDAO(Connection conn) {
		this.conn = conn;
	}

	public static void create(ClientePacote clientePacote) {
		sql = "INSERT INTO ClientePacote(id, dataCompra, idCliente, idPacote) VALUES(null, ?, ?, ?);";

		try (PreparedStatement stmt = conn.prepareStatement(sql)) {
			stmt.setTimestamp(1, new java.sql.Timestamp(clientePacote.getDataCompra().getTime()));
			stmt.setInt(2, clientePacote.getCliente().getId());
			stmt.setInt(3, clientePacote.getPacote().getId());

			stmt.executeUpdate();

			System.out.println(Colors.GREEN + "--ClientePacote criado com sucesso" + Colors.RESET);
		} catch (SQLException e) {
			System.out.println("--Erro ao criar ClientePacote, Mensagem: " + e.getMessage());
		} finally {

		}
	}

	public static List<ClientePacote> read(String pesquisa) {
		sql = String.format("SELECT * FROM ClientePacote WHERE nome LIKE '%s%%' OR cpf LIKE '%s%%'", pesquisa, pesquisa);
		List<ClientePacote> passagens = new ArrayList<ClientePacote>();

		try (Statement statement = conn.createStatement()) {
			ResultSet resultSet = statement.executeQuery(sql);

			while (resultSet.next()) {
				ClientePacote ClientePacote = new ClientePacote();

				ClientePacote.setId(resultSet.getInt("id"));
				ClientePacote.setCompania(resultSet.getString("compania"));
				ClientePacote.setIdaEvolta(resultSet.getBoolean("idaEvolta"));
				ClientePacote.setData(resultSet.getTimestamp("data"));
				ClientePacote.setTaxaServico(resultSet.getInt("taxaServico"));
				ClientePacote.setTaxaTaxaEmbarque(resultSet.getInt("taxaEmbarque"));
				ClientePacote.setTipoVoo(resultSet.getString("tipoVoo"));
				ClientePacote.setQuantidade(resultSet.getInt("quantidade"));
				ClientePacote.setPromocao(resultSet.getBoolean("promocao"));
				ClientePacote.setCnpjCompania(resultSet.getString("cnpjCompania"));
				ClientePacote.setValor(resultSet.getBigDecimal("valor"));
				ClientePacote.setDestino(DestinoDAO.findBy(resultSet.getInt("idDestino")));

				// stmt.setTimestamp(3, new
				// java.sql.Timestamp(consulta.getDataConsulta().getTime()));
			}
			System.out.println(Colors.GREEN + "--Resultado retornado com sucesso" + Colors.RESET);
			System.out.println("");
			return passagens;
		} catch (SQLException e) {
			System.out.println("--Não foi possíevl ler os dados da tabela ClientePacote. Message: " + e.getMessage());
			return null;
		}
	}

	public static void update(ClientePacote ClientePacote) {
		sql = "UPDATE ClientePacote SET compania = ?, idaEvolta = ?, data = ?, taxaServico = ?, taxaEmbarque = ?, tipoVoo = ?, quantidade = ?, promocao = ?, "
				+ "cnpjCompania = ?, valor = ?, idDestino = ? WHERE id = ? LIMIT 1";

		try (PreparedStatement stmt = conn.prepareStatement(sql)) {
			stmt.setString(1, ClientePacote.getCompania());
			stmt.setBoolean(2, ClientePacote.getIdaEvolta());
			stmt.setTimestamp(3, new java.sql.Timestamp(ClientePacote.getData().getTime()));
			stmt.setInt(4, ClientePacote.getTaxaServico());
			stmt.setInt(5, ClientePacote.getTaxaTaxaEmbarque());
			stmt.setString(6, ClientePacote.getTipoVoo());
			stmt.setInt(7, ClientePacote.getQuantidade());
			stmt.setBoolean(8, ClientePacote.getPromocao());
			stmt.setString(9, ClientePacote.getCnpjCompania());
			stmt.setBigDecimal(10, ClientePacote.getValor());
			stmt.setInt(11, ClientePacote.getDestino().getId());
			stmt.executeUpdate();

			System.out.printf(Colors.GREEN + "--ClientePacote atualizada" + Colors.RESET);

		} catch (SQLException e) {
			System.out.printf("--Erro ao atualizar ClientePacote com o id : %d, Mensagem: %n", ClientePacote.getId(),
					e.getMessage());

		} finally {

		}
	}

	public static void delete(int id) {
		sql = "DELETE FROM ClientePacote WHERE id = ? LIMIT 1";

		try (PreparedStatement stmt = conn.prepareStatement(sql)) {
			stmt.setInt(1, id);
			stmt.executeUpdate();

			System.out.println(Colors.GREEN + "--ClientePacote foi deletado com sucesso." + Colors.RESET);

		} catch (SQLException e) {
			System.out.printf(Colors.RED + "--Erro ao deletar ClientePacote com o id : %d, Mensagem: %n", id,
					e.getMessage() + Colors.RED);

		} finally {

		}
	}

	public static ClientePacote findBy(int ClientePacoteId) {
		sql = String.format("SELECT * FROM ClientePacote WHERE id = %d or cpf = %s", ClientePacoteId, ClientePacoteId);
		ClientePacote ClientePacote = new ClientePacote();

		try (Statement statement = conn.createStatement()) {
			ResultSet resultSet = statement.executeQuery(sql);

			while (resultSet.next()) {
				ClientePacote.setId(resultSet.getInt("id"));
				ClientePacote.setCompania(resultSet.getString("compania"));
				ClientePacote.setIdaEvolta(resultSet.getBoolean("idaEvolta"));
				ClientePacote.setData(resultSet.getTimestamp("data"));
				ClientePacote.setTaxaServico(resultSet.getInt("taxaServico"));
				ClientePacote.setTaxaTaxaEmbarque(resultSet.getInt("taxaEmbarque"));
				ClientePacote.setTipoVoo(resultSet.getString("tipoVoo"));
				ClientePacote.setQuantidade(resultSet.getInt("quantidade"));
				ClientePacote.setPromocao(resultSet.getBoolean("promocao"));
				ClientePacote.setCnpjCompania(resultSet.getString("cnpjCompania"));
				ClientePacote.setValor(resultSet.getBigDecimal("valor"));
				ClientePacote.setDestino(DestinoDAO.findBy(resultSet.getInt("idDestino")));
			}

			System.out.println(Colors.GREEN + "--Encontrado ClientePacote com sucesso" + Colors.RESET);

			return ClientePacote;
		} catch (SQLException e) {
			System.out.println("--Não foi possível encontrar o ClientePacote informado. Message: " + e.getMessage());
			return null;
		}

	}
}
