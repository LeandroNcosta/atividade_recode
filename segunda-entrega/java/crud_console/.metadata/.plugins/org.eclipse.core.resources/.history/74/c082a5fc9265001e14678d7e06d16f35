package com.agencia.dao;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

import com.agencia.model.Destino;
import com.agencia.utils.Colors;

public class DestinoDAO {

	private static Connection conn;
	// private static Connection conn = Database.createConnection();
	private static String sql;
	private static ResultSet rset = null;

	public DestinoDAO(Connection conn) {
		this.conn = conn;
	}

	public static void create(Destino destino) {
			sql = "INSERT INTO Destino(id, cidade, estado, pais, imagem) VALUES(null, ?, ?, ?, ?);";

			try (PreparedStatement stmt = conn.prepareStatement(sql)) {
				
				stmt.setString(1, destino.getCidade());
				stmt.setString(2, destino.getEstado());
				stmt.setString(3, destino.getPais());
				stmt.setString(4, destino.getImagem());
				
				stmt.executeUpdate();

				System.out.println(Colors.GREEN + "--Destino criado com sucesso" + Colors.RESET);
			} catch (SQLException e) {
				System.out.println("--Erro ao criar Destino, Mensagem: " + e.getMessage());
			} finally {

			}
		}

	public static List<Destino> read(String pesquisa) {
		sql = String.format("SELECT * FROM Destino WHERE nome LIKE '%s%%' OR cpf LIKE '%s%%'", pesquisa, pesquisa);
		List<Destino> hospedagens = new ArrayList<Destino>();

		try (Statement statement = conn.createStatement()) {
			ResultSet resultSet = statement.executeQuery(sql);

			while (resultSet.next()) {
				Destino Destino = new Destino();
				Destino.setId(resultSet.getInt("id"));
				Destino.setNome(resultSet.getString("nome"));
				Destino.setEstrelas(resultSet.getInt("estrelas"));
				Destino.setNome(resultSet.getString("cnpj"));
				Destino.setPromocao(resultSet.getBoolean("promocao"));
				Destino.setValor(resultSet.getBigDecimal("valor"));
				Destino.setEndereco(resultSet.getString("endereco"));
				Destino.setDataEntrada(resultSet.getTimestamp("dataEntrada"));
				Destino.setDataSaida(resultSet.getTimestamp("dataSaida"));
				// stmt.setTimestamp(3, new
				// java.sql.Timestamp(consulta.getDataConsulta().getTime()));
			}
			System.out.println(Colors.GREEN + "--Resultado retornado com sucesso" + Colors.RESET);
			System.out.println("");
			return hospedagens;
		} catch (SQLException e) {
			System.out.println("--Não foi possíevl ler os dados da tabela Destino. Message: " + e.getMessage());
			return null;
		}
	}

	public static void update(Destino Destino) {
		sql = "UPDATE Destino SET nome = ?, estrelas = ?, cnpj = ?, promocao = ?, valor = ?, endereco = ?, dataEntrada = ?, dataSaida = ? WHERE id = ? LIMIT 1";

		try (PreparedStatement stmt = conn.prepareStatement(sql)) {
			stmt.setString(1, Destino.getNome());
			stmt.setInt(2, Destino.getEstrelas());
			stmt.setString(3, Destino.getCnpj());
			stmt.setBoolean(4, Destino.getPromocao());
			stmt.setBigDecimal(5, Destino.getValor());
			stmt.setString(6, Destino.getEndereco());
			stmt.setTimestamp(7, new java.sql.Timestamp(Destino.getDataEntrada().getTime()));
			stmt.setTimestamp(7, new java.sql.Timestamp(Destino.getDataSaida().getTime()));

			stmt.executeUpdate();

			System.out.printf(Colors.GREEN + "--Destino atualizada" + Colors.RESET);

		} catch (SQLException e) {
			System.out.printf("--Erro ao atualizar Destino com o id : %d, Mensagem: %n", Destino.getId(),
					e.getMessage());

		} finally {

		}
	}

	public static void delete(int id) {
		sql = "DELETE FROM Destino WHERE id = ? LIMIT 1";

		try (PreparedStatement stmt = conn.prepareStatement(sql)) {
			stmt.setInt(1, id);
			stmt.executeUpdate();

			System.out.println(Colors.GREEN + "--Destino foi deletado com sucesso." + Colors.RESET);

		} catch (SQLException e) {
			System.out.printf(Colors.RED + "--Erro ao deletar Destino com o id : %d, Mensagem: %n", id,
					e.getMessage() + Colors.RED);

		} finally {

		}
	}

	public static Destino findBy(int DestinoId) {
		sql = String.format("SELECT * FROM Destino WHERE id = %d or cpf = %s", DestinoId, DestinoId);
		Destino Destino = new Destino();

		try (Statement statement = conn.createStatement()) {
			ResultSet resultSet = statement.executeQuery(sql);

			while (resultSet.next()) {
				Destino.setId(resultSet.getInt("id"));
				Destino.setNome(resultSet.getString("nome"));
				Destino.setEstrelas(resultSet.getInt("estrelas"));
				Destino.setNome(resultSet.getString("cnpj"));
				Destino.setPromocao(resultSet.getBoolean("promocao"));
				Destino.setValor(resultSet.getBigDecimal("valor"));
				Destino.setEndereco(resultSet.getString("endereco"));
				Destino.setDataEntrada(resultSet.getTimestamp("dataEntrada"));
				Destino.setDataSaida(resultSet.getTimestamp("dataSaida"));
			}

			System.out.println(Colors.GREEN + "--Encontrado Destino com sucesso" + Colors.RESET);

			return Destino;
		} catch (SQLException e) {
			System.out.println("--Não foi possível encontrar o Destino informado. Message: " + e.getMessage());
			return null;
		}

	}

}
